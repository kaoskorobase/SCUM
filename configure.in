AC_INIT(configure.in)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(scum,0.0.3)
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CXX
AM_PROG_CC_STDC
AC_HEADER_STDC

AC_ARG_WITH(fltk-config,
AC_HELP_STRING([--with-fltk-config],[location of the fltk-config script]),
  [FLTK_CONFIG=$withval],[FLTK_CONFIG="fltk-config"])

AC_ARG_ENABLE(debug,
AC_HELP_STRING([--enable-debug],[enable debugging support]),
  [],[enable_debug=no])

AC_ARG_ENABLE(fat-binary,
AC_HELP_STRING([--enable-fat-binary],[produce fat (statically linked) binary]),
  [enable_fat_binary=$enableval],[enable_fat_binary=no])

dnl AC_ARG_WITH(howl,
dnl AC_HELP_STRING([--without-howl],[compile without libhowl support]),
dnl  [with_howl=$withval],[with_howl=false])

dnl AC_ARG_WITH(cairo,
dnl   AC_HELP_STRING([--with-cairo],[enable cairo support]),
dnl   [use_cairo=$withval],[use_cairo=yes])

dnl AC_ARG_WITH(glitz,
dnl AC_HELP_STRING([--with-glitz],[disable glitz support]),
dnl   [use_glitz=$withval],[use_glitz=yes])

AC_C_BIGENDIAN([words_bigendian=true],[words_bigendian=false])

dnl if test "x$with_howl" == "xtrue"; then
dnl     PKG_CHECK_MODULES(PACKAGE,["howl"],[HAVE_HOWL=true],[HAVE_HOWL=false])
dnl else
dnl     HAVE_HOWL=false
dnl fi

dnl PKG_CHECK_MODULES(PACKAGE,["libsclang"])

dnl if test "$use_cairo" = "yes"; then
dnl    PKG_CHECK_MODULES(CAIRO,[cairo],[HAVE_CAIRO=true],[HAVE_CAIRO=false])
dnl else
dnl    HAVE_CAIRO=false
dnl fi
dnl 
dnl AM_CONDITIONAL(HAVE_CAIRO,$HAVE_CAIRO)
dnl 
dnl if $HAVE_CAIRO; then
dnl    PACKAGE_CFLAGS="$PACKAGE_CFLAGS $CAIRO_CFLAGS"
dnl    PACKAGE_LIBS="$PACKAGE_LIBS $CAIRO_LIBS"
dnl    AC_DEFINE([HAVE_CAIRO],[1],[Cairo])
dnl else
dnl    AC_DEFINE([HAVE_CAIRO],[0],[Cairo])
dnl fi
dnl 
dnl if test "$HAVE_CAIRO" = "true" -a "$use_glitz" = "yes"; then
dnl    PKG_CHECK_MODULES(GLITZ,[glitz,glitz-glx],[HAVE_GLITZ=true],[HAVE_GLITZ=false])
dnl else
dnl    HAVE_GLITZ=false
dnl fi
dnl 
dnl if $HAVE_GLITZ; then
dnl    PACKAGE_CFLAGS="$PACKAGE_CFLAGS $GLITZ_CFLAGS"
dnl    PACKAGE_LIBS="$PACKAGE_LIBS $GLITZ_LIBS"
dnl    AC_DEFINE([HAVE_GLITZ],[1],[glitz support])
dnl else
dnl    AC_DEFINE([HAVE_GLITZ],[0],[glitz support])
dnl fi

if ! which "${FLTK_CONFIG}" &>/dev/null; then
    AC_MSG_ERROR([flkt-config not found])
fi

if $HAVE_HOWL; then
    AC_DEFINE([HAVE_HOWL],[1],[Define when libhowl is available])
fi

if test "$enable_debug" = "yes"; then
    PACKAGE_DEBUG_CFLAGS="-g -DSCUM_DEBUG"
else
    PACKAGE_DEBUG_CFLAGS="-DNDEBUG"
fi

if ! $words_bigendian; then
    PACKAGE_CFLAGS="${PACKAGE_CFLAGS} -DOSC_HOST_LITTLE_ENDIAN=1"
fi

#fltk_config_args="--use-gl --use-images"
fltk_config_args="--use-gl"
FLTK_CFLAGS="$(${FLTK_CONFIG} ${fltk_config_args} --cflags)"
if test "x$enable_fat_binary" == "xyes"; then
    fltk_config_ld_args="--ldstaticflags"
else
    fltk_config_ld_args="--ldflags"
fi
FLTK_LIBS="$(${FLTK_CONFIG} ${fltk_config_args} ${fltk_config_ld_args})"

PLATFORM_LIBS=""
case $target_os in
    darwin*)
	PLATFORM_LIBS="-lpthread"
	;;
    linux*)
	PLATFORM_LIBS="-lrt"
	;;
esac

PACKAGE_CFLAGS="${PACKAGE_CFLAGS} -D_REENTRANT -Wno-unknown-pragmas ${PACKAGE_DEBUG_CFLAGS} ${FLTK_CFLAGS}"
PACKAGE_LIBS="${PACKAGE_LIBS} ${FLTK_LIBS} ${PLATFORM_LIBS}"
AC_SUBST(PACKAGE_CFLAGS)
AC_SUBST(PACKAGE_LIBS)
AC_SUBST(FLTK_CONFIG)

AC_OUTPUT([
Makefile
oscpp/Makefile
src/Makefile
])

dnl EOF
